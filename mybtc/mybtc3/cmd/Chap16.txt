コマンド16-1-1　非圧縮公開鍵を生成$ cd ~/work/mywallet$ uncompPubKey=`openssl ec -in secp256k1-private.pem -pubout -outform DER | tail -c 65 | xxd -p -c 65` ; echo $uncompPubKeyread EC keywriting EC key04a646db440d066badfd345d3a02e50d17ffaee4d570a40d23f4852e84b38e04717925ecd296dc8074480ad9ccb285bac578e40f5aa29d15268086bbe36fb2c2f6コマンド16-1-2　圧縮公開鍵を生成$ pubKey=02`echo $uncompPubKey | cut -c3-66` ; echo $pubKey02a646db440d066badfd345d3a02e50d17ffaee4d570a40d23f4852e84b38e0471コマンド16-1-3　pubKeyHashを生成$ pubKeyHash=`echo $pubKey | hash160` ; echo $pubKeyHash431416cbe0fda77c72a7e0345ce8f6f0a142c01cコマンド16-1-4　アドレスを生成$ addr=`echo 6f${pubKeyHash} | b58ce` ; echo $addrmmdddicL5rG97fSSjtSiLZRq2Kct5NxDMyコマンド16-1-5　受金したTXIDを変数に格納$ TXID=ccc10bc76148a51deade62459c3b8cdaaad7c54df00f779e08c1a14cf4e6d728コマンド16-1-6　受金トランザクションを確認$ bcit decoderawtransaction `bcit getrawtransaction $TXID`{  "txid": "ccc10bc76148a51deade62459c3b8cdaaad7c54df00f779e08c1a14cf4e6d728",  "hash": "ccc10bc76148a51deade62459c3b8cdaaad7c54df00f779e08c1a14cf4e6d728",  "version": 2,  "size": 226,  "vsize": 226,  "locktime": 1294069,  "vin": [    {      "txid": "2912fc5f0b69f6c395e4d94062ff6219940c58d65ac4861cfa2da95259b3e67f",      "vout": 1,      "scriptSig": {        "asm": "3045022100a5e8de3d658e3d4776a7cf765a8869cf2c081d091465da6d52a88753bc817c12022049967f7195d2d5a58e7ffac1ad9c52262f3eb858d0b09142a6542bed2f4de62e[ALL] 02848291f2c64a157994291c834bb604359be4832f86686181e0f7f070338598ef",        "hex": "483045022100a5e8de3d658e3d4776a7cf765a8869cf2c081d091465da6d52a88753bc817c12022049967f7195d2d5a58e7ffac1ad9c52262f3eb858d0b09142a6542bed2f4de62e012102848291f2c64a157994291c834bb604359be4832f86686181e0f7f070338598ef"      },      "sequence": 4294967294    }  ],  "vout": [    {      "value": 1162.42905840,      "n": 0,      "scriptPubKey": {        "asm": "OP_DUP OP_HASH160 ea85a21db7ada635641ce1a2d548375a6af8558f OP_EQUALVERIFY OP_CHECKSIG",        "hex": "76a914ea85a21db7ada635641ce1a2d548375a6af8558f88ac",        "reqSigs": 1,        "type": "pubkeyhash",        "addresses": [          "n2tzVwjLCHLfep9easNbdKMQdypvLCM6JC"        ]      }    },    {      "value": 0.61918670,      "n": 1,      "scriptPubKey": {        "asm": "OP_DUP OP_HASH160 431416cbe0fda77c72a7e0345ce8f6f0a142c01c OP_EQUALVERIFY OP_CHECKSIG",        "hex": "76a914431416cbe0fda77c72a7e0345ce8f6f0a142c01c88ac",        "reqSigs": 1,        "type": "pubkeyhash",        "addresses": [          "mmdddicL5rG97fSSjtSiLZRq2Kct5NxDMy"        ]      }    }  ]}コマンド16-1-7　Version noを設定$ nVersion=02000000コマンド16-1-8　Input Counterを設定$ inCnt=01コマンド16-1-9　トランザクションインプットのTXIDを設定$ prevTXID=`echo -n $TXID | tac -rs ..` ; echo $prevTXID28d7e6f44ca1c1089e770ff04dc5d7aada8c3b9c4562deea1da54861c70bc1ccコマンド16-1-10　UTXOのOutput Indexを設定$ prevVout=01000000コマンド16-1-11　UTXOのscriptPubKeyとそのサイズを設定$ prevScriptPubKey=76a914431416cbe0fda77c72a7e0345ce8f6f0a142c01c88ac$ prevScriptPubKeySize=`printf %x $(expr ${#prevScriptPubKey} / 2)` ; echo $prevScriptPubKeySize19コマンド16-1-12　Sequence Numberを設定$ sequence=ffffffffコマンド16-1-13　トランザクションアウトプットのscriptPubKeyとそのサイズを設定$ scriptPubKey=76a914431416cbe0fda77c72a7e0345ce8f6f0a142c01c88ac$ scriptPubKeySize=`printf %x $(expr ${#scriptPubKey} / 2)` ; echo $scriptPubKeySize19コマンド16-1-14　Output Counterを設定$ outCnt=01コマンド16-1-15　Amountを設定$ python3>>> amount=(0.61918670 - 0.01) * (10 ** 8)>>> format(int(amount), '016x')'0000000003a18b8e'>>> quit()$ amount=`echo -n 0000000003a18b8e | tac -rs .. | tr -d '\n'` ; echo $amount8e8ba10300000000コマンド16-1-16　Locktimeを設定$ locktime=00000000コマンド16-1-17　トランザクションを生成$ RAW_TX=`echo ${nVersion}${inCnt}${prevTXID}${prevVout}${prevScriptPubKeySize}${prevScriptPubKey}${sequence}${outCnt}${amount}${scriptPubKeySize}${scriptPubKey}${locktime}` ; echo $RAW_TX020000000128d7e6f44ca1c1089e770ff04dc5d7aada8c3b9c4562deea1da54861c70bc1cc010000001976a914431416cbe0fda77c72a7e0345ce8f6f0a142c01c88acffffffff018e8ba103000000001976a914431416cbe0fda77c72a7e0345ce8f6f0a142c01c88ac00000000コマンド16-1-18　トランザクションを確認$ bcit decoderawtransaction $RAW_TX{  "txid": "1908660039997c2330f0a28fb7f2f9fc7918f58d588b2911ddb3fabe88347404",  "hash": "1908660039997c2330f0a28fb7f2f9fc7918f58d588b2911ddb3fabe88347404",  "version": 2,  "size": 110,  "vsize": 110,  "locktime": 0,  "vin": [    {      "txid": "ccc10bc76148a51deade62459c3b8cdaaad7c54df00f779e08c1a14cf4e6d728",      "vout": 1,      "scriptSig": {        "asm": "OP_DUP OP_HASH160 431416cbe0fda77c72a7e0345ce8f6f0a142c01c OP_EQUALVERIFY OP_CHECKSIG",        "hex": "76a914431416cbe0fda77c72a7e0345ce8f6f0a142c01c88ac"      },      "sequence": 4294967295    }  ],  "vout": [    {      "value": 0.60918670,      "n": 0,      "scriptPubKey": {        "asm": "OP_DUP OP_HASH160 431416cbe0fda77c72a7e0345ce8f6f0a142c01c OP_EQUALVERIFY OP_CHECKSIG",        "hex": "76a914431416cbe0fda77c72a7e0345ce8f6f0a142c01c88ac",        "reqSigs": 1,        "type": "pubkeyhash",        "addresses": [          "mmdddicL5rG97fSSjtSiLZRq2Kct5NxDMy"        ]      }    }  ]}コマンド16-1-19　HashTypeを設定$ hashType=01コマンド16-1-20　署名対象のSHA-256を生成$ sha256_message=`echo -n ${RAW_TX}${hashType}000000 | xxd -r -p | openssl dgst -sha256 | cut -c10-` ; echo $sha256_messagef95b870bd28055016708b8d89e42eed7e1d4974b840d133d729cb193b33d7504コマンド16-1-21　署名を生成$ signature=`echo -n $sha256_message | xxd -r -p | openssl dgst -sha256 -sign secp256k1-private.pem -hex | cut -c10-` ; echo $signature304502200a0e80665db7bc3b843464c4affbc6a489c455d5b92df8fc7485b9184729edd3022100d8fb82322685fd6eac3f183bfe63273391f68fb67ecfc7f7150ff6fbe1508c27コマンド16-1-22　DERの署名を分解$ header=`echo $signature | cut -c1-2` ; echo $header30$ sig_len_hex=`echo $signature | cut -c3-4` ; echo $sig_len_hex45$ ind1=`echo $signature | cut -c5-6` ; echo $ind102$ r_len=`printf %d 0x$(echo $signature | cut -c7-8)` ; echo $r_len32$ r=`echo $signature | cut -c9-$(expr $(expr $r_len \* 2) + 8)` ; echo $r0a0e80665db7bc3b843464c4affbc6a489c455d5b92df8fc7485b9184729edd3$ ind2=`echo $signature | cut -c$(expr $(expr $r_len \* 2) + 9)-$(expr $(expr $r_len \* 2) + 10)` ; echo $ind202$ s_len=`printf %d 0x$(echo $signature | cut -c$(expr $(expr $r_len \* 2) + 11)-$(expr $(expr $r_len \* 2) + 12))` ; echo $s_len33$ s=`echo $signature | cut -c$(expr $(expr $r_len \* 2) + 13)-` ; echo $s00d8fb82322685fd6eac3f183bfe63273391f68fb67ecfc7f7150ff6fbe1508c27コマンド16-1-23　scriptSigを生成$ scriptSig=$(printf %x $(expr $(expr ${#signature} + ${#hashType}) / 2))${signature}${hashType}$(printf %x $(expr ${#pubKey} / 2))${pubKey} ; echo $scriptSig48304502200a0e80665db7bc3b843464c4affbc6a489c455d5b92df8fc7485b9184729edd3022100d8fb82322685fd6eac3f183bfe63273391f68fb67ecfc7f7150ff6fbe1508c27012102a646db440d066badfd345d3a02e50d17ffaee4d570a40d23f4852e84b38e0471コマンド16-1-24　署名済みトランザクションを生成$ SIGNED_RAW_TX=`echo ${nVersion}${inCnt}${prevTXID}${prevVout}$(printf %x $(expr ${#scriptSig} / 2))${scriptSig}${sequence}${outCnt}${amount}${scriptPubKeySize}${scriptPubKey}${locktime}` ; echo $SIGNED_RAW_TX020000000128d7e6f44ca1c1089e770ff04dc5d7aada8c3b9c4562deea1da54861c70bc1cc010000006b48304502200a0e80665db7bc3b843464c4affbc6a489c455d5b92df8fc7485b9184729edd3022100d8fb82322685fd6eac3f183bfe63273391f68fb67ecfc7f7150ff6fbe1508c27012102a646db440d066badfd345d3a02e50d17ffaee4d570a40d23f4852e84b38e0471ffffffff018e8ba103000000001976a914431416cbe0fda77c72a7e0345ce8f6f0a142c01c88ac00000000コマンド16-1-25　署名済みトランザクションを確認$ bcit decoderawtransaction $SIGNED_RAW_TX{  "txid": "a24ef6b999d0ab0965d5ea80bb5668602402a5d98bbc14b666a5ccd86db58427",  "hash": "a24ef6b999d0ab0965d5ea80bb5668602402a5d98bbc14b666a5ccd86db58427",  "version": 2,  "size": 192,  "vsize": 192,  "locktime": 0,  "vin": [    {      "txid": "ccc10bc76148a51deade62459c3b8cdaaad7c54df00f779e08c1a14cf4e6d728",      "vout": 1,      "scriptSig": {        "asm": "304502200a0e80665db7bc3b843464c4affbc6a489c455d5b92df8fc7485b9184729edd3022100d8fb82322685fd6eac3f183bfe63273391f68fb67ecfc7f7150ff6fbe1508c27[ALL] 02a646db440d066badfd345d3a02e50d17ffaee4d570a40d23f4852e84b38e0471",        "hex": "48304502200a0e80665db7bc3b843464c4affbc6a489c455d5b92df8fc7485b9184729edd3022100d8fb82322685fd6eac3f183bfe63273391f68fb67ecfc7f7150ff6fbe1508c27012102a646db440d066badfd345d3a02e50d17ffaee4d570a40d23f4852e84b38e0471"      },      "sequence": 4294967295    }  ],  "vout": [    {      "value": 0.60918670,      "n": 0,      "scriptPubKey": {        "asm": "OP_DUP OP_HASH160 431416cbe0fda77c72a7e0345ce8f6f0a142c01c OP_EQUALVERIFY OP_CHECKSIG",        "hex": "76a914431416cbe0fda77c72a7e0345ce8f6f0a142c01c88ac",        "reqSigs": 1,        "type": "pubkeyhash",        "addresses": [          "mmdddicL5rG97fSSjtSiLZRq2Kct5NxDMy"        ]      }    }  ]}コマンド16-1-26　トランザクションを伝搬（エラー）$ bcit sendrawtransaction $SIGNED_RAW_TXerror code: -26error message:64: non-mandatory-script-verify-flag (Non-canonical signature: S value is unnecessarily high)コマンド16-1-27　n－sを計算$ python3>>> n=115792089237316195423570985008687907852837564279074904382605163141518161494337>>> s=0x00d8fb82322685fd6eac3f183bfe63273391f68fb67ecfc7f7150ff6fbe1508c27>>> format(n-s, '064x')'27047dcdd97a029153c0e7c4019cd8cb28b84d303078d844aac26790eee5b51a'>>> quit()コマンド16-1-28　n－sを変数に格納$ mod_s=27047dcdd97a029153c0e7c4019cd8cb28b84d303078d844aac26790eee5b51aコマンド16-1-29　n－sのサイズを計算$ mod_s_len=`expr $(echo ${#mod_s} / 2)` ; echo $mod_s_len32コマンド16-1-30　n－sのサイズを16進数に変換$ mod_s_len_hex=`printf %x $mod_s_len` ; echo $mod_s_len_hex20コマンド16-1-31　DER内のsignatureのサイズを再計算$ mod_sig_len_hex=`printf %x $(expr $(expr $r_len + $mod_s_len) + 4)` ; echo $mod_sig_len_hex44コマンド16-1-32　rのサイズ（16進数）を計算$ r_len_hex=`printf %x $r_len` ; echo $r_len_hex20コマンド16-1-33　signatureを再作成$ mod_signature=${header}${mod_sig_len_hex}${ind1}${r_len_hex}${r}${ind2}${mod_s_len_hex}${mod_s} ; echo $mod_signature304402200a0e80665db7bc3b843464c4affbc6a489c455d5b92df8fc7485b9184729edd3022027047dcdd97a029153c0e7c4019cd8cb28b84d303078d844aac26790eee5b51aコマンド16-1-34　scriptSigを再作成$ mod_scriptSig=$(printf %x $(expr $(expr ${#mod_signature} + ${#hashType}) / 2))${mod_signature}${hashType}$(printf %x $(expr ${#pubKey} / 2))${pubKey} ; echo $mod_scriptSig47304402200a0e80665db7bc3b843464c4affbc6a489c455d5b92df8fc7485b9184729edd3022027047dcdd97a029153c0e7c4019cd8cb28b84d303078d844aac26790eee5b51a012102a646db440d066badfd345d3a02e50d17ffaee4d570a40d23f4852e84b38e0471コマンド16-1-35　署名済みトランザクションを再作成$ MOD_SIGNED_RAW_TX=`echo ${nVersion}${inCnt}${prevTXID}${prevVout}$(printf %x $(expr ${#mod_scriptSig} / 2))${mod_scriptSig}${sequence}${outCnt}${amount}${scriptPubKeySize}${scriptPubKey}${locktime}` ; echo $MOD_SIGNED_RAW_TX020000000128d7e6f44ca1c1089e770ff04dc5d7aada8c3b9c4562deea1da54861c70bc1cc010000006a47304402200a0e80665db7bc3b843464c4affbc6a489c455d5b92df8fc7485b9184729edd3022027047dcdd97a029153c0e7c4019cd8cb28b84d303078d844aac26790eee5b51a012102a646db440d066badfd345d3a02e50d17ffaee4d570a40d23f4852e84b38e0471ffffffff018e8ba103000000001976a914431416cbe0fda77c72a7e0345ce8f6f0a142c01c88ac00000000コマンド16-1-36　署名済みトランザクションを確認$ bcit decoderawtransaction $MOD_SIGNED_RAW_TX{  "txid": "f1fd493b4798df99267ef0544b8313a269ee4f2da74261fda30503f79a461b63",  "hash": "f1fd493b4798df99267ef0544b8313a269ee4f2da74261fda30503f79a461b63",  "version": 2,  "size": 191,  "vsize": 191,  "locktime": 0,  "vin": [    {      "txid": "ccc10bc76148a51deade62459c3b8cdaaad7c54df00f779e08c1a14cf4e6d728",      "vout": 1,      "scriptSig": {        "asm": "304402200a0e80665db7bc3b843464c4affbc6a489c455d5b92df8fc7485b9184729edd3022027047dcdd97a029153c0e7c4019cd8cb28b84d303078d844aac26790eee5b51a[ALL] 02a646db440d066badfd345d3a02e50d17ffaee4d570a40d23f4852e84b38e0471",        "hex": "47304402200a0e80665db7bc3b843464c4affbc6a489c455d5b92df8fc7485b9184729edd3022027047dcdd97a029153c0e7c4019cd8cb28b84d303078d844aac26790eee5b51a012102a646db440d066badfd345d3a02e50d17ffaee4d570a40d23f4852e84b38e0471"      },      "sequence": 4294967295    }  ],  "vout": [    {      "value": 0.60918670,      "n": 0,      "scriptPubKey": {        "asm": "OP_DUP OP_HASH160 431416cbe0fda77c72a7e0345ce8f6f0a142c01c OP_EQUALVERIFY OP_CHECKSIG",        "hex": "76a914431416cbe0fda77c72a7e0345ce8f6f0a142c01c88ac",        "reqSigs": 1,        "type": "pubkeyhash",        "addresses": [          "mmdddicL5rG97fSSjtSiLZRq2Kct5NxDMy"        ]      }    }  ]}コマンド16-1-37　署名済みトランザクションを送信$ bcit sendrawtransaction $MOD_SIGNED_RAW_TXf1fd493b4798df99267ef0544b8313a269ee4f2da74261fda30503f79a461b63コマンド16-1-38　Pythonのdivmod関数で確認$ python3>>> divmod(5, 8)(0, 5)>>> divmod(8-5, 8)(0, 3)>>> divmod(-5, 8)(-1, 3)コマンド16-2-1　利用するアドレス$ bcit getaddressesbyaccount  "bob_legacy_01"[  "mzfPortdXRJCY5fPXaQeLxRh3Ke3AEirVy"]コマンド16-2-2　署名済みトランザクションを変数に設定$ SIGNED_RAW_TX=0200000001c5035193679637fddba046047fd85e8b64baef88f928aa0ded695c19ffaf9500000000006b4830450221008d90b6ea970968afd393a56e26430751a7ea0f92f80cd50e641a38ec8b5f1739022041efe075eb84040fd1b7c188ff36ea3c91f9b3581ae5397c4d3c096980eecfe3012102e8fe565a5bdef860c7734bd5f74edcfd6dcfb205678145c08bf5e1deb0cac01cfeffffff020d5962020000000017a9144593c00f0df56b3b897d1eddbf5db33a8bec7f518780c3c901000000001976a914d20303f9aa73ef80862edd9384a70d4e7b97820f88ac00000000コマンド16-2-3　署名済みトランザクションを確認$ bcit decoderawtransaction $SIGNED_RAW_TX{  "txid": "539ff4916004b5b70399af4fbadb659182ad1e65161adc800f422caead9fc2ba",  "hash": "539ff4916004b5b70399af4fbadb659182ad1e65161adc800f422caead9fc2ba",  "version": 2,  "size": 224,  "vsize": 224,  "locktime": 0,  "vin": [    {      "txid": "0095afff195c69ed0daa28f988efba648b5ed87f0446a0dbfd379667935103c5",      "vout": 0,      "scriptSig": {        "asm": "30450221008d90b6ea970968afd393a56e26430751a7ea0f92f80cd50e641a38ec8b5f1739022041efe075eb84040fd1b7c188ff36ea3c91f9b3581ae5397c4d3c096980eecfe3[ALL] 02e8fe565a5bdef860c7734bd5f74edcfd6dcfb205678145c08bf5e1deb0cac01c",        "hex": "4830450221008d90b6ea970968afd393a56e26430751a7ea0f92f80cd50e641a38ec8b5f1739022041efe075eb84040fd1b7c188ff36ea3c91f9b3581ae5397c4d3c096980eecfe3012102e8fe565a5bdef860c7734bd5f74edcfd6dcfb205678145c08bf5e1deb0cac01c"      },      "sequence": 4294967294    }  ],  "vout": [    {      "value": 0.39999757,      "n": 0,      "scriptPubKey": {        "asm": "OP_HASH160 4593c00f0df56b3b897d1eddbf5db33a8bec7f51 OP_EQUAL",        "hex": "a9144593c00f0df56b3b897d1eddbf5db33a8bec7f5187",        "reqSigs": 1,        "type": "scripthash",        "addresses": [          "2Myb7cPMNtYf5M1yqExNemrxYqzBvsYfzmY"        ]      }    },    {      "value": 0.30000000,      "n": 1,      "scriptPubKey": {        "asm": "OP_DUP OP_HASH160 d20303f9aa73ef80862edd9384a70d4e7b97820f OP_EQUALVERIFY OP_CHECKSIG",        "hex": "76a914d20303f9aa73ef80862edd9384a70d4e7b97820f88ac",        "reqSigs": 1,        "type": "pubkeyhash",        "addresses": [          "mzfPortdXRJCY5fPXaQeLxRh3Ke3AEirVy"        ]      }    }  ]}コマンド16-2-4　versionを設定$ ver=`printf %08x 70015 | tac -rs ..` ; echo $ver7f110100コマンド16-2-5　servicesを設定$ services=`printf %016x $( echo $(( 2#10000001101 )) )  | tac -rs ..` ; echo $services0d04000000000000コマンド16-2-6　timestampを設定$ timestamp=`printf %016x $(date +%s) | tac -rs ..` ; echo $timestamp4418175b00000000コマンド16-2-7　addr_recvを設定$ addr_recv=`printf %052x 0` ; echo $addr_recv0000000000000000000000000000000000000000000000000000コマンド16-2-8　addr_fromを設定$ addr_from=`echo $services``printf %036x 0` ; echo $addr_from0d04000000000000000000000000000000000000000000000000コマンド16-2-9　nonceを設定$ nonce=`uuidgen -r | sha256d | cut -c1-16` ; echo $nonce7454368e46723ac3コマンド16-2-10　user_agentを設定$ user_agent=`echo -n "/Satoshi:0.16.0/" | xxd -p` ; echo $user_agenteba7e9286961f9ceコマンド16-2-11　user_agentのサイズを設定$ user_agent_len=`expr $(printf %x ${#user_agent}) / 2` ; echo $user_agent_len10コマンド16-2-12　start_heightを設定$ start_height=`printf %08x $(bcit getblockcount) | tac -rs ..` ; echo $start_heightca311400コマンド16-2-13　relayを設定$ relay=01コマンド16-2-14　versionメッセージのペイロードを生成$ payload=${ver}${services}${timestamp}${addr_recv}${addr_from}${nonce}${user_agent_len}${user_agent}${start_height}${relay} ; echo $payload7f1101000d040000000000004418175b0000000000000000000000000000000000000000000000000000000000000d040000000000000000000000000000000000000000000000007454368e46723ac3102f5361746f7368693a302e31362e302fca31140001コマンド16-2-15　versionメッセージのヘッダを生成$ command=version$ header=0b110907`printf "%-24s" $(echo -n $command | xxd -p) | sed -e "s/ /0/g"``printf %08x $(expr $(echo ${#payload}) / 2) | tac -rs ..``echo -n $payload | sha256d | cut -c1-8` ; echo $header0b11090776657273696f6e00000000006600000023708de5コマンド16-2-16　versionメッセージを生成$ version=`echo $header$payload` ; echo $version0b11090776657273696f6e00000000006600000023708de57f1101000d040000000000004418175b0000000000000000000000000000000000000000000000000000000000000d040000000000000000000000000000000000000000000000007454368e46723ac3102f5361746f7368693a302e31362e302fca31140001コマンド16-2-17　verackメッセージを生成$ command=verack$ payload=""$ header=0b110907`printf "%-24s" $(echo -n $command | xxd -p) | sed -e "s/ /0/g"``printf %08x $(expr $(echo ${#payload}) / 2) | tac -rs ..``echo -n $payload | sha256d | cut -c1-8` ; echo $header0b11090776657261636b000000000000000000005df6e0e2$ verack=`echo $header$payload` ; echo $verack0b11090776657261636b000000000000000000005df6e0e2コマンド16-2-18　invメッセージのペイロードを生成$ payload=0101000000`echo -n $SIGNED_RAW_TX | sha256d` ; echo $payload0101000000bac29fadae2c420f80dc1a16651ead829165dbba4faf9903b7b5046091f49f53コマンド16-2-19　invメッセージのヘッダを生成$ command=inv$ header=0b110907`printf "%-24s" $(echo -n $command | xxd -p) | sed -e "s/ /0/g"``printf %08x $(expr $(echo ${#payload}) / 2) | tac -rs ..``echo -n $payload | sha256d | cut -c1-8` ; echo $header0b110907696e760000000000000000002500000081ae4824コマンド16-2-20　invメッセージを生成$ inv=`echo $header$payload` ; echo $inv0b110907696e760000000000000000002500000081ae48240101000000bac29fadae2c420f80dc1a16651ead829165dbba4faf9903b7b5046091f49f53コマンド16-2-21　txメッセージを生成$ command=tx$ payload=$SIGNED_RAW_TX$ header=0b110907`printf "%-24s" $(echo -n $command | xxd -p) | sed -e "s/ /0/g"``printf %08x $(expr $(echo ${#payload}) / 2) | tac -rs ..``echo -n $payload | sha256d | cut -c1-8` ; echo $header0b110907747800000000000000000000e0000000bac29fad$ tx=`echo $header$payload` ; echo $tx0b110907747800000000000000000000e0000000bac29fad0200000001c5035193679637fddba046047fd85e8b64baef88f928aa0ded695c19ffaf9500000000006b4830450221008d90b6ea970968afd393a56e26430751a7ea0f92f80cd50e641a38ec8b5f1739022041efe075eb84040fd1b7c188ff36ea3c91f9b3581ae5397c4d3c096980eecfe3012102e8fe565a5bdef860c7734bd5f74edcfd6dcfb205678145c08bf5e1deb0cac01cfeffffff020d5962020000000017a9144593c00f0df56b3b897d1eddbf5db33a8bec7f518780c3c901000000001976a914d20303f9aa73ef80862edd9384a70d4e7b97820f88ac00000000コマンド16-2-22　TXIDを生成$ TXID=`echo $SIGNED_RAW_TX | sha256d | tr -d "\n" | tac -rs ..` ; echo $TXID539ff4916004b5b70399af4fbadb659182ad1e65161adc800f422caead9fc2baコマンド16-2-23　p2p.pyの実行からverackメッセージの受信まで$ python3 p2p.pyplease input version message > 0b11090776657273696f6e00000000006600000023708de57f1101000d040000000000004418175b0000000000000000000000000000000000000000000000000000000000000d040000000000000000000000000000000000000000000000007454368e46723ac3102f5361746f7368693a302e31362e302fca31140001[+] "version"     payload: 7f1101000d04000000000000e31a175b0000000000000000000000000000000000000000000000000000000000000d04000000000000000000000000000000000000000000000000d803424fbd96ad17102f5361746f7368693a302e31362e302fd231140001[+] "verack"     payload:コマンド16-2-24　verackメッセージを送信please input verack message > 0b11090776657261636b000000000000000000005df6e0e2コマンド16-2-25　invメッセージを送信please input inv message > 0b110907696e760000000000000000002500000081ae48240101000000bac29fadae2c420f80dc1a16651ead829165dbba4faf9903b7b5046091f49f53[+] "getdata"     payload: 0101000040bac29fadae2c420f80dc1a16651ead829165dbba4faf9903b7b5046091f49f53コマンド16-2-26　txメッセージを送信please input tx message > 0b110907747800000000000000000000e0000000bac29fad0200000001c5035193679637fddba046047fd85e8b64baef88f928aa0ded695c19ffaf9500000000006b4830450221008d90b6ea970968afd393a56e26430751a7ea0f92f80cd50e641a38ec8b5f1739022041efe075eb84040fd1b7c188ff36ea3c91f9b3581ae5397c4d3c096980eecfe3012102e8fe565a5bdef860c7734bd5f74edcfd6dcfb205678145c08bf5e1deb0cac01cfeffffff020d5962020000000017a9144593c00f0df56b3b897d1eddbf5db33a8bec7f518780c3c901000000001976a914d20303f9aa73ef80862edd9384a70d4e7b97820f88ac00000000コマンド16-2-27　Bitcoin Coreに送信されたことを確認$ bcit getrawtransaction $TXID0200000001c5035193679637fddba046047fd85e8b64baef88f928aa0ded695c19ffaf9500000000006b4830450221008d90b6ea970968afd393a56e26430751a7ea0f92f80cd50e641a38ec8b5f1739022041efe075eb84040fd1b7c188ff36ea3c91f9b3581ae5397c4d3c096980eecfe3012102e8fe565a5bdef860c7734bd5f74edcfd6dcfb205678145c08bf5e1deb0cac01cfeffffff020d5962020000000017a9144593c00f0df56b3b897d1eddbf5db33a8bec7f518780c3c901000000001976a914d20303f9aa73ef80862edd9384a70d4e7b97820f88ac00000000コマンド16-2-28　ncコマンドの実行方法$ echo ${version}${verack}${inv}${tx} | xxd -r -p | nc localhost 18333 > p2p.txtコマンド16-2-29　p2p.txtを確認$ cat p2p.txt | xxd -p -c 10000000000 | sed -e 's/0b110907/\n/g' | grep -E '76657273696f6e|76657261636b|'$revTXID'' | while read line; do echo -e "\n [+] \"$(echo ${line} | cut -c1-24 | xxd -r -p | tr -d "\0" )\":\n     payload: $(echo ${line} | cut -c41-)" ; done[+] "version":     payload: 7f1101000d040000000000000a97dc5a0000000000000000000000000000000000000000000000000000000000000d040000000000000000000000000000000000000000000000005702bbb9843a073b102f5361746f7368693a302e31362e302f22be130001[+] "verack":     payload:[+] "getdata":     payload: 01010000405df6e0e2761359d30a8275058e299fcc0381534545f55cf43e41983f5d4c9456