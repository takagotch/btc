コマンド3-1-1　abcdefghijklmnをSHA-256でハッシュ化$ echo -n abcdefghijklmn | openssl dgst -sha256(stdin)= 0653c7e992d7aad40cb2635738b870e4c154afb346340d02c797d490dd52d5f9コマンド3-1-2　abcdefghijklmnをSHA-256でハッシュ化して余計な部分を除外$ echo -n abcdefgjijklmn | openssl dgst -sha256 | cut -c10-0653c7e992d7aad40cb2635738b870e4c154afb346340d02c797d490dd52d5f9コマンド3-1-3　abcdefghijklmNをSHA-256でハッシュ化$ echo -n abcdefgjijklmN | openssl dgst -sha256 | cut -c10-1c32addf235dd9e07d02d9514f6cc4fceea9abb4fd1dba8bf2ad9536e123ac2dコマンド3-1-4　aをSHA-256でハッシュ化$ echo -n a | openssl dgst -sha256 | cut -c10-ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bbコマンド3-1-5　aをRIPEMD-160でハッシュ化$ echo -n a | openssl dgst -rmd160 | cut -c10-0bdc9d2d256b3ee9daae347be6f4dc835a467ffeコマンド3-1-6　abをHASH160でハッシュ化$ echo -n ab | openssl dgst -sha256 -binary | openssl dgst -rmd160 | cut -c10-e4973182d0c331ce8b083ffa2b28c8b4fc0f1d93コマンド3-1-7　16進数abで表現されるバイナリデータをHASH160でハッシュ化$ echo -n ab | xxd -r -p | openssl dgst -sha256 -binary | openssl dgst -rmd160 | cut -c10-2710d55635fd8c42e006137a96ca61cba1a947fcコマンド3-1-8　16進数abで表現されるバイナリデータをSHA256Dでハッシュ化$ echo -n ab | xxd -r -p | openssl dgst -sha256 -binary | openssl dgst -sha256 | cut -c10-a420fdd170370f5d58a7bf3ccbf0689039ec0e6366501bf875fa66837399fcd2コマンド3-1-9　ホームの.bashrcをviで開く$ vi ~/.bashrcコマンド3-1-10　.bashrcを読み込む$ source ~/.bashrcコマンド3-1-11　設定の稼働を確認$ echo -n ab | hash1602710d55635fd8c42e006137a96ca61cba1a947fc$ echo -n ab | sha256da420fdd170370f5d58a7bf3ccbf0689039ec0e6366501bf875fa66837399fcd2コマンド3-1-12　HMAC-SHA512でキーに文字列を指定してハッシュ化$ echo -n "what do ya want for nothing?" | openssl dgst -sha512 -hmac "Jefe" | cut -c10-164b7a7bfcf819e2e395fbe73b56e0a387bd64222e831fd610270cd7ea2505549758bf75c05a994a6d034f65f8f0e6fdcaeab1a34d4a6b4b636e070a38bce737コマンド3-1-13　キーに16進数を指定してHMAC-SHA512でハッシュ化$ echo -n "Jefe" | xxd -p4a656665$ echo -n "what do ya want for nothing?" | openssl dgst -sha512 -mac HMAC -macopt hexkey:4a656665 | cut -c10-164b7a7bfcf819e2e395fbe73b56e0a387bd64222e831fd610270cd7ea2505549758bf75c05a994a6d034f65f8f0e6fdcaeab1a34d4a6b4b636e070a38bce737コマンド3-1-14　`コマンド`でネスト$ echo -n "what do ya want for nothing?" | openssl dgst -sha512 -mac HMAC -macopt hexkey:`echo -n Jefe | xxd -p` | cut -c10-164b7a7bfcf819e2e395fbe73b56e0a387bd64222e831fd610270cd7ea2505549758bf75c05a994a6d034f65f8f0e6fdcaeab1a34d4a6b4b636e070a38bce737コマンド3-1-15　$(コマンド)でネスト$ echo -n "what do ya want for nothing?" | openssl dgst -sha512 -mac HMAC -macopt hexkey:$(echo -n Jefe | xxd -p) | cut -c10-164b7a7bfcf819e2e395fbe73b56e0a387bd64222e831fd610270cd7ea2505549758bf75c05a994a6d034f65f8f0e6fdcaeab1a34d4a6b4b636e070a38bce737コマンド3-1-16　コマンドの実行結果を変数に格納し、すぐに表示$ hmac=`echo -n "what do ya want for nothing?" | openssl dgst -sha512 -mac HMAC -macopt hexkey:$(echo -n Jefe | xxd -p) | cut -c10-` ; echo $hmac164b7a7bfcf819e2e395fbe73b56e0a387bd64222e831fd610270cd7ea2505549758bf75c05a994a6d034f65f8f0e6fdcaeab1a34d4a6b4b636e070a38bce737コマンド3-1-17　パスワードをPBKDF2でハッシュ化$ python3>>> import hashlib, binascii>>> hashFunc="sha512">>> password=b"passw0rd">>> salt=b"bitcoin">>> iteCnt=100>>> encPass=hashlib.pbkdf2_hmac(hashFunc, password, salt, iteCnt)>>> binascii.hexlify(encPass)b'65252733b1f1d6e5abd4474d696989641125bedb34be2c7789eef454abac6e718180666c73e0ec44ed529291e3b6e5b22d4222b263c259aa0128ad9f5e1cd2c2'>>> quit()コマンド3-3-1　作業ディレクトリの作成と移動$ mkdir -p ~/work/mywallet ; cd ~/work/mywalletコマンド3-3-2　パラメータファイルを生成$ openssl ecparam -name secp256k1 -out secp256k1.pemコマンド3-3-3　楕円曲線を確認$ openssl ecparam -in secp256k1.pem -text -nooutASN1 OID: secp256k1コマンド3-3-4　パラメータを確認$ openssl ecparam -in secp256k1.pem -text -param_enc explicit -nooutField Type: prime-fieldPrime:    00:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:    ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:fe:ff:    ff:fc:2fA:    0B:    7 (0x7)Generator (uncompressed):    04:79:be:66:7e:f9:dc:bb:ac:55:a0:62:95:ce:87:    0b:07:02:9b:fc:db:2d:ce:28:d9:59:f2:81:5b:16:    f8:17:98:48:3a:da:77:26:a3:c4:65:5d:a4:fb:fc:    0e:11:08:a8:fd:17:b4:48:a6:85:54:19:9c:47:d0:    8f:fb:10:d4:b8Order:    00:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:    ff:fe:ba:ae:dc:e6:af:48:a0:3b:bf:d2:5e:8c:d0:    36:41:41Cofactor:  1 (0x1)コマンド3-3-5　秘密鍵を生成$ openssl ecparam -in secp256k1.pem -genkey -noout -out secp256k1-private.pemコマンド3-3-6　秘密鍵を確認$ cat secp256k1-private.pem-----BEGIN EC PRIVATE KEY-----MHQCAQEEILdrlw3jV/39yl0VE5dUsOkoWzfLYwgIFNHJPy15Bd7xoAcGBSuBBAAKoUQDQgAEpkbbRA0Ga639NF06AuUNF/+u5NVwpA0j9IUuhLOOBHF5JezSltyAdEgK2cyyhbrFeOQPWqKdFSaAhrvjb7LC9g==-----END EC PRIVATE KEY-----コマンド3-3-7　秘密鍵を16進数表記で出力$ openssl ec -in secp256k1-private.pem -outform DER | tail -c +8 | head -c 32 | xxd -p -c 32read EC keywriting EC keyb76b970de357fdfdca5d15139754b0e9285b37cb63080814d1c93f2d7905def1コマンド3-3-8　秘密鍵を変数に格納$ privKey=b76b970de357fdfdca5d15139754b0e9285b37cb63080814d1c93f2d7905def1コマンド3-3-9　公開鍵を生成$ openssl ec -in secp256k1-private.pem -pubout -out secp256k1-public.pem ; cat secp256k1-public.pemread EC keywriting EC key-----BEGIN PUBLIC KEY-----MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEpkbbRA0Ga639NF06AuUNF/+u5NVwpA0j9IUuhLOOBHF5JezSltyAdEgK2cyyhbrFeOQPWqKdFSaAhrvjb7LC9g==-----END PUBLIC KEY-----コマンド3-3-10　公開鍵を16進数表記で出力$ openssl ec -in secp256k1-private.pem -pubout -outform DER | tail -c 65 | xxd -p -c 65read EC keywriting EC key04a646db440d066badfd345d3a02e50d17ffaee4d570a40d23f4852e84b38e04717925ecd296dc8074480ad9ccb285bac578e40f5aa29d15268086bbe36fb2c2f6コマンド3-3-11　ファイルを確認$ lssecp256k1-private.pem  secp256k1-public.pem  secp256k1.pemコマンド3-3-12　公開鍵のプレフィックス、x、yを出力$ pubKey=04a646db440d066badfd345d3a02e50d17ffaee4d570a40d23f4852e84b38e04717925ecd296dc8074480ad9ccb285bac578e40f5aa29d15268086bbe36fb2c2f6$ prefix=`echo $pubKey | cut -c1-2` ; echo "prefix = $prefix"prefix = 04$ x=`echo $pubKey | cut -c3-66` ; echo "x = $x"x = a646db440d066badfd345d3a02e50d17ffaee4d570a40d23f4852e84b38e0471$ y=`echo $pubKey | cut -c67-130` ; echo "y = $y"y = 7925ecd296dc8074480ad9ccb285bac578e40f5aa29d15268086bbe36fb2c2f6コマンド3-3-13　bxのec-to-publicコマンドで公開鍵を生成$ bx ec-to-public -u $privKey042a140a36886350368f8799269023d827dcf6cc971fbbefe98690e9337e676500eda18e72f64131ebb3f57117544b3a8a84dbc7fbdfa368de812662604be89f80コマンド3-3-14　testコマンドで一致を確認$ test $pubKey = `bx ec-to-public -u $privKey` ; echo $?0コマンド3-4-1　送信対象のメッセージを作成$ echo secret > message.txt ; cat message.txtsecretコマンド3-4-2　署名データを作成$ openssl dgst -sha256 -sign secp256k1-private.pem message.txt > message.sig ; ls message.sigmessage.sigコマンド3-4-3　公開鍵で署名データを検証$ openssl dgst -sha256 -verify secp256k1-public.pem -signature message.sig message.txtVerified OKコマンド3-4-4　攻撃者の秘密鍵を生成$ openssl ecparam -genkey -name secp256k1 -out secp256k1-private-evil.pem ; ls secp256k1-private-evil.pemsecp256k1-private-evil.pemコマンド3-4-5　攻撃者のメッセージを生成$ echo "tampered secret" > tampered_message.txt ; cat tampered_message.txttampered secretコマンド3-4-6　攻撃者の秘密鍵で署名$ openssl dgst -sha256 -sign secp256k1-private-evil.pem tampered_message.txt > tampered_message.sig ; ls tampered_message.sigtampered_message.sigコマンド3-4-7　公開鍵で署名データを検証$ openssl dgst -sha256 -verify secp256k1-public.pem -signature tampered_message.sig tampered_message.txtVerification Failureコマンド3-5-1　作業ディレクトリに移動$ cd ~/work/mywallet/コマンド3-5-2　パラメータkを生成$ openssl ecparam -genkey -name secp256k1 -out k.pem ; ls k.pemk.pem$ openssl ec -in k.pem -outform DER | tail -c +8 | head -c 32 | xxd -p -c 32read EC keywriting EC keye9ba1754704b1ce06a0fb5f1d5c2717784e02daaa52ad236dd7ea6bd273b4d78$ k=e9ba1754704b1ce06a0fb5f1d5c2717784e02daaa52ad236dd7ea6bd273b4d78コマンド3-5-3　Rを生成$ openssl ec -in k.pem -pubout -outform DER | tail -c 65 | xxd -p -c 65read EC keywriting EC key04db32827730d3b4971b0def2acd07f14e896519251c2949955aaef05870dac2ff3e04b8f7f5549ca510696a0b7eea9f13f45d00dc97f0b3e9a08122bede217582$ R=04db32827730d3b4971b0def2acd07f14e896519251c2949955aaef05870dac2ff3e04b8f7f5549ca510696a0b7eea9f13f45d00dc97f0b3e9a08122bede217582コマンド3-5-4　Rからrxを取得$ rx=`echo $R | cut -c3-66` ; echo $rxdb32827730d3b4971b0def2acd07f14e896519251c2949955aaef05870dac2ffコマンド3-5-5　メッセージのハッシュ値を生成$ mh=`cat message.txt | xxd -r -p | openssl dgst -sha256 | cut -c10-` ; echo $mh45f83d17e10b34fca01eb8f4454dac34a777d9404a464e732cf4abf2c0da94c4コマンド3-5-6　公開鍵を変数Qに格納$ Q=$pubKey ; echo $Q04a646db440d066badfd345d3a02e50d17ffaee4d570a40d23f4852e84b38e04717925ecd296dc8074480ad9ccb285bac578e40f5aa29d15268086bbe36fb2c2f6コマンド3-5-7　Pythonのコンソールを起動し、プログラムを読み込む$ python3>>> import modinv as mコマンド3-5-8　5 mod 13の逆元を計算>>> m.multiply_inv(5, 13)8コマンド3-5-9　8 mod 13の逆元を計算>>> m.multiply_inv(8, 13)5コマンド3-5-10　2 mod 10の逆元を計算するとエラーになる>>> m.multiply_inv(2,10)Traceback (most recent call last):  File "<stdin>", line 1, in <module>  File "/home/bc01/work/mywallet/modinv.py", line 13, in multiply_inv    raise Exception('multiply modular inverse does not exist')Exception: multiply modular inverse does not existコマンド3-5-11　変数の設定>>> n=115792089237316195423570985008687907852837564279074904382605163141518161494337>>> k=0xe9ba1754704b1ce06a0fb5f1d5c2717784e02daaa52ad236dd7ea6bd273b4d78>>> rx=0xdb32827730d3b4971b0def2acd07f14e896519251c2949955aaef05870dac2ff>>> mh=0x45f83d17e10b34fca01eb8f4454dac34a777d9404a464e732cf4abf2c0da94c4>>> d=0xb76b970de357fdfdca5d15139754b0e9285b37cb63080814d1c93f2d7905def1コマンド3-5-12　rを算出>>> r = rx % n>>> r99145756633375074997298797991537938788756337670120068775127128114040116265727コマンド3-5-13　sを算出>>> s = (mh + d * r) * m.multiply_inv(k, n) % nコマンド3-5-14　GとQに掛けるスカラーを算出>>> co_G = mh * m.multiply_inv(s, n) % n>>> co_Q = r * m.multiply_inv(s, n) % nコマンド3-5-15　r、co_G、co_Qを16進数表記で出力>>> format(r, '064x')'db32827730d3b4971b0def2acd07f14e896519251c2949955aaef05870dac2ff'>>> format(co_G, '064x')'31620acceb0371cf050afd7660f220cdbccf13572696a28a69b04c6e3e3065b1'>>> format(co_Q, '064x')'f985aa437222945ad8ed71b7aa2b2d52e182ab45aca8b4d0f879ba8a37df61f8'>>> quit()コマンド3-5-16　r、co_G、co_Qを変数に格納$ r=db32827730d3b4971b0def2acd07f14e896519251c2949955aaef05870dac2ff$ co_G=31620acceb0371cf050afd7660f220cdbccf13572696a28a69b04c6e3e3065b1$ co_Q=f985aa437222945ad8ed71b7aa2b2d52e182ab45aca8b4d0f879ba8a37df61f8コマンド3-5-17　r/s＊Qを算出$ r_sInv_Q=`bx ec-multiply $Q $co_Q` ; echo $r_sInv_Q047de475eb5f4cec42a504b313c41e5a3b172f5f30fec5839a6a645bd3880edb346b1e0914ca266b8cb435b834ef7b458f6bb07a85c0d27fd7253f55c8a6a43333コマンド3-5-18　点Pを算出し、pxを取得$ px=`bx ec-add $r_sInv_Q $co_G | cut -c3-66` ; echo $pxdb32827730d3b4971b0def2acd07f14e896519251c2949955aaef05870dac2ffコマンド3-5-19　署名の検証$ test $px = $r ; echo $?0